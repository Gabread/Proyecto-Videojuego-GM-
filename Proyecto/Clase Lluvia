//Clase Lluvia
package puppy.code;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;

public class Lluvia {
    private Array<Gota> gotas;
    private long lastDropTime;
    private Texture gotaBuenaTexture;
    private Texture gotaMalaTexture;
    private Texture powerUpVidaTexture;
    private Texture powerUpEscudoTexture;
    private Sound dropSound;
    private Music rainMusic;
    private float velocidadBase;
    private long intervaloCreacion;

    public Lluvia(Texture gotaBuena, Texture gotaMala, Texture powerUpVida, 
                  Texture powerUpEscudo, Sound ss, Music mm) {
        this.gotaBuenaTexture = gotaBuena;
        this.gotaMalaTexture = gotaMala;
        this.powerUpVidaTexture = powerUpVida;
        this.powerUpEscudoTexture = powerUpEscudo;
        this.dropSound = ss;
        this.rainMusic = mm;
        this.velocidadBase = 300f;
        this.intervaloCreacion = 100000000L;
    }
    
    // getters
    public float getVelocidadBase() {
        return velocidadBase;
    }
    
    public long getIntervaloCreacion() {
        return intervaloCreacion;
    }
    
    public Array<Gota> getGotas() {
        return gotas;
    }
    
    // setters
    public void setVelocidadBase(float velocidadBase) {
        this.velocidadBase = velocidadBase;
    }
    
    public void setIntervaloCreacion(long intervaloCreacion) {
        this.intervaloCreacion = intervaloCreacion;
    }

    public void crear() {
        gotas = new Array<Gota>();
        crearGotaDeLluvia();
        rainMusic.setLooping(true);
        rainMusic.play();
    }

    private void crearGotaDeLluvia() {
        float x = MathUtils.random(0, 800 - 64);
        float y = 480;
        float velocidad = velocidadBase;

        int random = MathUtils.random(1, 200);
        
        if (random == 1 && powerUpVidaTexture != null) {
            gotas.add(new PowerUpVidaExtra(powerUpVidaTexture, x, y, velocidad, 1.0f));
        } else if (random == 2 && powerUpEscudoTexture != null) {
            gotas.add(new PowerUpEscudo(powerUpEscudoTexture, x, y, velocidad, 5.0f));
        } else if (MathUtils.random(1, 10) < 5) {
            gotas.add(new GotaMala(gotaMalaTexture, x, y, velocidad));
        } else {
            gotas.add(new GotaBuena(gotaBuenaTexture, x, y, velocidad));
        }
        
        lastDropTime = TimeUtils.nanoTime();
    }

    public boolean actualizarMovimiento(Tarro tarro) {
        if (TimeUtils.nanoTime() - lastDropTime > intervaloCreacion) {
            crearGotaDeLluvia();
        }

        float dt = Gdx.graphics.getDeltaTime();

        for (int i = 0; i < gotas.size; i++) {
            Gota gota = gotas.get(i);
            gota.update(dt);

            if (!gota.isActivo()) {
                gotas.removeIndex(i);
                i--;
                continue;
            }

            if (gota.getBounds().overlaps(tarro.getArea())) {
                gota.onCollide(tarro);

                if (gota instanceof GotaBuena) {
                    dropSound.play();
                }

                if (tarro.getVidas() <= 0) {
                    return false;
                }

                if (!gota.isActivo()) {
                    gotas.removeIndex(i);
                    i--;
                }
            }
        }
        return true;
    }

    public void actualizarDibujoLluvia(SpriteBatch batch) {
        for (int i = 0; i < gotas.size; i++) {
            Gota gota = gotas.get(i);
            batch.draw(gota.getTexture(), gota.getBounds().x, gota.getBounds().y);
        }
    }

    public void destruir() {
        dropSound.dispose();
        rainMusic.dispose();
    }

    public void pausar() {
        rainMusic.stop();
    }

    public void continuar() {
        rainMusic.play();
    }
}
